package com.bobe.netty.pushserver;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.handler.codec.ByteToMessageDecoder;
import io.netty.handler.codec.MessageToMessageDecoder;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Slf4j
public class ProtocolDecoder extends MessageToMessageDecoder<String> {


    private static final String SHYQT = "GAS";

    @Override
    protected void decode(ChannelHandlerContext ctx, String msg, List<Object> out) throws Exception {
       String originalData = msg.replace(" ","");

        System.out.println(msg);

        if (msg.length()<=0){
            return ;
        }

        //命令位
        String cmd = originalData.substring(0, 2);
        //数据位
        final String data = originalData.substring(2, 10);
        //气体类型
        final String qasType = originalData.substring(10, 12);

        PushData pushData = new PushData();
        pushData.setCmd(cmd);
        pushData.setData(Integer.parseInt(data, 16) / 1.0+"");
        pushData.setQasType(qasType);
        System.out.println(pushData.toJson().toString());
        out.add(pushData);

    }

    /*@Override
    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
        final int msgLength = in.readableBytes();
        System.out.println("===: " + msgLength);
        String originalData = ByteBufUtil.hexDump(in);
        if (msgLength != 9) {
            log.info("[收发数据格式错误: { } ]", originalData);
            in.clear();
            return;
        }

        log.info("Decoder收到数据:{}", originalData);

        //起始位
        String start = originalData.substring(0, 2);
        //命令位
        String cmd = originalData.substring(2, 4);
        //数据位
        final String data = originalData.substring(4, 12);
        //气体类型
        final String qasType = originalData.substring(12, 14);
        //单位
        final String qasUnit = originalData.substring(14, 16);




        // 传感器设备ID   监测类型，0：温度，1：湿度，2：氧气，3：可燃气体，4：H2S，5：CO   监测值  告警状态，0：正常，1：告警
        // 告警内容     上报日期      创建日期   修改日期  [id auto,传感器设备不要，del_flag默认值]

        *//**
         * 将in的副本返回给上层decoder，并且跳过所有in的可读字节。因为retainedDuplicate()只是将in的引用数加1
         * 并且复制其readerIndex、writerIndex等，并没有真的复制缓冲区，所以这样几乎不消耗额外性能。
         * 之后就安全地in.skipBytes(in.readableBytes())读走所有字节。
         *
         * if you produce a message you need to also read something from the ByteBuf.
         * This check was added to catch endless loops generated by user decoder bugs.
         * 这是用来防止由decoder引起的无限循环的机制
         *
         *//*
        in.skipBytes(in.readableBytes());
    }*/
}